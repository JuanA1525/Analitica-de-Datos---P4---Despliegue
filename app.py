# -*- coding: utf-8 -*-
"""Despliegue.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XybLoJPQphfms01Qsa4zWrSqcVe12Yof
"""

# Despliegue

#- Cargamos el modelo
#- Cargamos los datos futuros (Churn_Modelling-future.csv)
#- Preparar los datos futuros
#- Aplicamos el modelo para la predicción

#Importamos librerías básicas
import pandas as pd # manipulacion dataframes
import numpy as np  # matrices y vectores
import matplotlib.pyplot as plt #gráfica

#Cargamos el modelo
import pickle
filename = 'modelo-Arbol-clasi-hiper.pkl'
modelTree,labelencoder,variables = pickle.load(open(filename, 'rb'))

#Cargamos los datos preparados Heart_Disease_FUTURE.csv (SE COMENTAN LAS DOS LINEAS DESPUES DE ESTE COMENTARIO UNA VEZ CULMINADO TODO EL PROCESO)
# data = pd.read_csv("Heart_Disease_FUTURE.csv")
# data.head()

# Pasamos variables numericas a categoricas.
# COMENTAR ESTO AL FINAL
# data['Sex']=data['Sex'].astype('category')
# data['Chest pain type']=data['Chest pain type'].astype('category')
# data['EKG results']=data['EKG results'].astype('category')
# data['Exercise angina']=data['Exercise angina'].astype('category')
# data['Slope of ST']=data['Slope of ST'].astype('category')
# data['Number of vessels fluro']=data['Number of vessels fluro'].astype('category')
# data['Thallium']=data['Thallium'].astype('category')
# data.info()

#Se crea interfaz gráfica con streamlit para capturar los datos
# NOOOOOOO EJECUTARRRR
#Se crea interfaz gráfica con streamlit para captura de los datos

import streamlit as st

st.title('Predicción de riesgo de padecer Cardiopatía')

age = st.slider('Age', min_value=18, max_value=80, value=30, step=1)
sex = st.selectbox('Sex', ['1', '0'])
chest_pain_type = st.selectbox('Chest pain type', ['1', '2', '3', '4'])
cholesterol = st.slider('Cholesterol', min_value=100, max_value=600, value=200, step=1)
ekg_results = st.selectbox('EKG results', ['0', '1', '2'])
max_hr = st.slider('Max HR', min_value=60, max_value=202, value=100, step=1)
exercise_angina = st.selectbox('Exercise angina', ['1', '0'])
st_depression = st.slider('ST depression', min_value=0.0, max_value=7.0, value=1.0, step=0.1)
slope_of_st = st.selectbox('Slope of ST', ['1', '2', '3'])
number_of_vessels_fluro = st.selectbox('Number of vessels fluro', ['0', '1', '2', '3'])
thallium = st.selectbox('Thallium', ['3', '6', '7'])

# Construcción del vector de entrada con las variables capturadas
datos = [[
    age,
    sex,
    chest_pain_type,
    cholesterol,
    ekg_results,
    max_hr,
    exercise_angina,
    st_depression,
    slope_of_st,
    number_of_vessels_fluro,
    thallium
]]

# Crear DataFrame con nombres de columnas correctos
data = pd.DataFrame(datos, columns=[
    'Age',
    'Sex',
    'Chest pain type',
    'Cholesterol',
    'EKG results',
    'Max HR',
    'Exercise angina',
    'ST depression',
    'Slope of ST',
    'Number of vessels fluro',
    'Thallium'
])

#Se realiza la preparación debe ser igual al aprendizaje
#Se crean dummies a las variables predictoras categóricas (no a la variable obj)
#Se crean dummies a las variables predictoras categóricas (no a la variable obj)
data_preparada=data.copy()
data_preparada = pd.get_dummies(data_preparada, columns=['Chest pain type', 'Number of vessels fluro', 'Thallium', 'EKG results', 'Slope of ST'], drop_first=False, dtype=int)
data_preparada = pd.get_dummies(data_preparada, columns=['Sex', 'Exercise angina'], drop_first=True, dtype=int)

# Alinear columnas con las del modelo entrenado
data_preparada = data_preparada.reindex(columns=variables, fill_value=0)
data_preparada.head()

"""PREDICCIONES"""

#Hacemos la predicción con el Tree
Y_fut = modelTree.predict(data_preparada)
print(Y_fut)

# labelencoder
data['Tree']=labelencoder.inverse_transform(Y_fut)
data.head()

data